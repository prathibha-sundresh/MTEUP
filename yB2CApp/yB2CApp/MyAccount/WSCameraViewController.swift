//
//  WSCameraViewController.swift
//  yB2CApp
//
//  Created by Ramakrishna on 12/1/17.
//

import UIKit
import AVFoundation
import Photos



class WSCameraViewController: UIViewController {
    
    enum PresentationStyle {
        case Modal
        case Show
    }
    
    enum ScreenOpenFor {
        case OnBoarding
        case MyProfile
    }
    
    
    @IBOutlet fileprivate var captureButton: UIButton!
    
    @IBOutlet weak var switchCameraButton: UIButton! {
        didSet {
            //switchCameraButton.isHidden = screenOpenFor == .MyProfile ? false : true
        }
    }
    @IBOutlet weak var galleryButton: UIButton!
    
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var photoModeButton: UIButton!
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    ///Allows the user to put the camera in video mode.
    @IBOutlet fileprivate var videoModeButton: UIButton!
    
    // let cameraController = UFSCameraHelperViewController()
    
    var callBack: ((_ menuCardArray:[[String:Any]]) -> Void)?
    
    override var prefersStatusBarHidden: Bool { return true }
    
    var presentationStyle:PresentationStyle = .Show
    var screenOpenFor:ScreenOpenFor = .OnBoarding
    
    //New Camera Variable and outlets
    // IBOutlet for AACameraView
    @IBOutlet weak var cameraView: UFSCameraView!
    @IBOutlet weak var backButton: UIButton!
    override func viewDidLoad() {
        super.viewDidLoad()
        
        backButton.setTitle(WSUtility.getlocalizedString(key: "Back", lang: WSUtility.getLanguage(), table: "Localizable"), for: .normal)
        
        askForCameraPermissions()
        
        cameraView.response = { response in
            if let url = response as? URL {
                
                print(url)
            }
            else if let img = response as? UIImage {
                
                // let roundImage = UFSUtility.makeUIImageRoundCorner(image: img)
                UIView.transition(with: self.galleryButton,
                                  duration: 1,
                                  options: .transitionCrossDissolve,
                                  animations: { self.galleryButton.setImage(img, for: .normal) },
                                  completion: nil)
                
                
                if WSUtility.checkPhotoLibraryAccessPermission() {
                    try? PHPhotoLibrary.shared().performChangesAndWait {
                        PHAssetChangeRequest.creationRequestForAsset(from: img)
                    }
                }
                
            }
            else if let error = response as? Error {
                print("Error: ", error.localizedDescription)
            }
        }
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.tabBarController?.tabBar.isHidden = true
        
        
        if WSUtility.checkPhotoLibraryAccessPermission() {
            fetchLastPhot()
        } else {
            askForCameraPermissions()
        }
        cameraView.startSession()
        
    }
    
    override func viewDidAppear(_ animated: Bool) {
        
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        cameraView.stopSession()
    }
    
    func askForCameraPermissions() {
        
        cameraView.requestAuthorization({ granted in
            if !granted {
                self.AlertWhenNoAccess()
            } else {
                
            }
        })
    }
    
    @IBAction func toggleFlash(_ sender: UIButton) {
        cameraView.toggleFlash()
    }
    
    @IBAction func captureAction(_ sender: UIButton) {
        cameraView.triggerCamera()
    }
    
    @IBAction func toggleCamera(_ sender: UIButton) {
        cameraView.toggleMode()
        switch cameraView.outputMode {
        case .image:
            captureButton.tintColor = UIColor.white
            break
        default:
            captureButton.tintColor = UIColor.red
            break
        }
        
    }
    
    @IBAction func flipCamera(_ sender: UIButton) {
        cameraView.toggleCamera()
    }
    
    @IBAction func backButtonAction(_sender: UIButton){
        if presentationStyle == .Modal {
            self.dismiss(animated: true, completion: nil)
            return
        }
        
        self.navigationController?.popViewController(animated: true)
    }
    
    @IBAction func openGalleryScreen(_ sender: UIButton){
        
        // GalleryVCSegue
      /*
        if galleryButton.currentImage == #imageLiteral(resourceName: "gallery_icon") {
            if WSUtility.checkPhotoLibraryAccessPermission(){
                performSegue(withIdentifier: "GalleryVCSegue", sender: self)
            }
        }
        else{
            performSegue(withIdentifier: "PhotoUploadVC", sender: self)
        }
        */
        if (WSUtility.checkPhotoLibraryAccessPermission()) {
             performSegue(withIdentifier: "GalleryVCSegue", sender: self)
        } else {
            AlertWhenNoAccess()
        }
      
      
      
    }
    @IBAction func unwindSegueToCamera(segue: UIStoryboardSegue){
        
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        
        if segue.destination is WSPhotoUploadViewController{
            let photoVC = segue.destination as! WSPhotoUploadViewController
            photoVC.thumbnailImage = galleryButton.currentImage
        }
        
    }
    
    func fetchLastPhot()  {
        let fetchOptions = PHFetchOptions()
        fetchOptions.sortDescriptors = [NSSortDescriptor(key: "creationDate", ascending: true)]
        
        let fetchResult = PHAsset.fetchAssets(with: PHAssetMediaType.image, options: fetchOptions)
        
        if let lastAsset = fetchResult.lastObject {
            let manager = PHImageManager.default()
            // let imageRequestOptions = PHImageRequestOptions()
            let size = CGSize(width: 120, height: 120)
            
            manager.requestImage(for: lastAsset, targetSize: size, contentMode: .aspectFit, options: nil, resultHandler: { (image, info) in
                //self.galleryButton.setImage(WSUtility.makeUIImageRoundCorner(image: image!), for: .normal)
            })
        }
        
    }
    
    func AlertWhenNoAccess() {
        let errorMessage = WSUtility.getlocalizedString(key: "Please give the permission to use Camera/Gallery for this app feature.", lang: WSUtility.getLanguage())
        let alert = UIAlertController(title: "", message: errorMessage, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: WSUtility.getlocalizedString(key: "Open Settings", lang: WSUtility.getLanguage()), style: .default, handler: { (_) in
            DispatchQueue.main.async {
                if let settingsURL = URL(string: UIApplicationOpenSettingsURLString) {
                    UIApplication.shared.openURL(settingsURL)
                }
            }
        }))
        alert.addAction(UIAlertAction(title: WSUtility.getlocalizedString(key: "NotNow", lang: WSUtility.getLanguage()), style: .cancel, handler: {(_) in
            self.navigationController?.popViewController(animated: true)
        }))
        self.present(alert, animated: true, completion: nil)
        return
    }
    
}


